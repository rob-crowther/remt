#!/usr/bin/env python3
#
# remt - reMarkable tablet tools
#
# Copyright (C) 2018 by Artur Wroblewski <wrobell@riseup.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import asyncio
import asyncssh
import configparser
import glob
import json
import os
import os.path
from tempfile import TemporaryDirectory


BASE_DIR = '/home/root/.local/share/remarkable/xochitl/'

FILE_TYPE = {
    'CollectionType': 'd',
}


async def fetch(fn, dest):
    conf_file = os.path.join(os.environ['HOME'], '.config', 'remt.ini')
    cp = configparser.ConfigParser()
    cp.read(conf_file)

    host = cp.get('connection', 'host')
    user = cp.get('connection', 'user')
    password = cp.get('connection', 'password')

    ctx = asyncssh.connect(host, username=user, password=password)
    async with ctx as conn:
        await asyncssh.scp((conn, fn), dest, preserve=True, recurse=True)

async def read_meta():
    with TemporaryDirectory() as dest:
        await fetch(BASE_DIR + '*.metadata', dest)

        files = glob.glob(dest + '/*.metadata')
        uuids = (os.path.basename(v) for v in files)
        uuids = (v.replace('.metadata', '') for v in uuids)
        data = (json.load(open(fn)) for fn in files)
        return {fn: v for fn, v in zip(uuids, data)}

def get_fn(data, meta):
    parent = data.get('parent')
    name = data['visibleName']
    if parent:
        return get_fn(meta[parent], meta) + '/' + name
    else:
        return name
        
def resolve_uuid(meta):
    return {get_fn(data, meta): data for data in meta.values()}

def marker(cond, marker):
    return marker if cond else '-'

async def cmd_ls():
    meta = await read_meta()
    meta = resolve_uuid(meta)
    for fn, data in sorted(meta.items()):
        bookmarked = marker(data['pinned'] is True, 'b')
        is_dir = marker(data['type'] == 'CollectionType', 'd')
        line = '{}{} {}'.format(is_dir, bookmarked, fn)
        print(line)
         

loop = asyncio.get_event_loop()
loop.run_until_complete(cmd_ls())

# vim: sw=4:et:ai
